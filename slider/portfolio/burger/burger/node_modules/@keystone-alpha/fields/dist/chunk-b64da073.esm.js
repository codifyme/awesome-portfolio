import _objectSpread from '@babel/runtime/helpers/esm/objectSpread';
import { DateTime } from 'luxon';
import { format } from 'date-fns';
import React__default from 'react';
import { DayTimePicker } from '@arch-ui/day-picker';

function parseDate(value) {
  // why do we use luxon instead of date-fns/native Dates?
  // native Dates don't allow you to set custom timezones
  // yes, you can parse other timezones but they're converted
  // to the local time zone
  const dt = DateTime.fromISO(value, {
    setZone: true
  });
  return {
    date: dt.toFormat('yyyy-LL-dd'),
    time: dt.toFormat('HH:mm:ss.SSS'),
    offset: dt.toFormat('ZZ')
  };
}

function stringifyDate(date) {
  return "".concat(date.date, "T").concat(date.time).concat(date.offset);
}

const CalendarDayFilterView = props => {
  const parsedDate = props.value ? parseDate(props.value) : parseDate(new Date().toISOString());

  let handleDayChange = day => {
    props.onChange(stringifyDate(_objectSpread({}, parsedDate, {
      date: format(day, 'YYYY-MM-DD')
    })));
  };

  let handleTimeChange = event => {
    props.onChange(stringifyDate(_objectSpread({}, parsedDate, {
      time: event.target.value
    })));
  };

  let handleOffsetChange = offset => {
    props.onChange(stringifyDate(_objectSpread({}, parsedDate, {
      offset
    })));
  };

  if (!props.filter) return null;
  const _props$field$config = props.field.config,
        yearRangeFrom = _props$field$config.yearRangeFrom,
        yearRangeTo = _props$field$config.yearRangeTo,
        yearPickerType = _props$field$config.yearPickerType;
  return React__default.createElement(DayTimePicker, _objectSpread({}, parsedDate, {
    htmlID: 'calendar-day-filter',
    handleDayChange,
    handleTimeChange,
    handleOffsetChange,
    yearRangeFrom,
    yearRangeTo,
    yearPickerType
  }));
};

export default CalendarDayFilterView;
