import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { jsx } from '@emotion/core';
import { Component, createRef } from 'react';
import { FieldContainer, FieldLabel, FieldInput } from '@arch-ui/fields';
import { LockIcon, EyeIcon } from '@arch-ui/icons';
import { Button } from '@arch-ui/button';
import { Input } from '@arch-ui/input';
import { FlexGroup } from '@arch-ui/layout';
import { Alert } from '@arch-ui/alert';
import { A11yText } from '@arch-ui/typography';

class PasswordField extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "focusTarget", createRef());

    _defineProperty(this, "state", {
      isEditing: false,
      showInputValue: false,
      inputPassword: '',
      inputConfirm: ''
    });

    _defineProperty(this, "onChange", _ref => {
      let target = _ref.target;
      const name = target.name,
            value = target.value;
      this.setState(_ref2 => {
        let inputPassword = _ref2.inputPassword,
            inputConfirm = _ref2.inputConfirm;
        this.props.onChange({
          inputPassword,
          inputConfirm,
          [name]: value
        });
        return {
          [name]: value
        };
      });
    });

    _defineProperty(this, "toggleInterface", () => {
      function maybeFocus() {
        if (this.state.isEditing && this.focusTarget.current) {
          this.focusTarget.current.focus();
        }
      }

      this.setState(state => ({
        isEditing: !state.isEditing
      }), maybeFocus);
    });

    _defineProperty(this, "toggleMode", () => {
      this.setState(state => ({
        showInputValue: !state.showInputValue
      }));
    });
  }

  render() {
    const _this$state = this.state,
          isEditing = _this$state.isEditing,
          inputPassword = _this$state.inputPassword,
          inputConfirm = _this$state.inputConfirm,
          showInputValue = _this$state.showInputValue;
    const _this$props = this.props,
          autoFocus = _this$props.autoFocus,
          field = _this$props.field,
          serverValue = _this$props.value,
          errors = _this$props.errors,
          warnings = _this$props.warnings;
    const value = serverValue || '';
    const htmlID = "ks-input-".concat(field.path);
    return jsx(FieldContainer, null, jsx(FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), jsx(FieldInput, null, isEditing ? jsx(FlexGroup, {
      growIndexes: [0, 1]
    }, jsx(Input, {
      autoComplete: "off",
      autoFocus: autoFocus,
      id: htmlID,
      ref: this.focusTarget,
      name: "inputPassword",
      onChange: this.onChange,
      placeholder: "New Password",
      type: showInputValue ? 'text' : 'password',
      value: inputPassword
    }), jsx(Input, {
      autoComplete: "off",
      autoFocus: autoFocus,
      id: "".concat(htmlID, "-confirm"),
      name: "inputConfirm",
      onChange: this.onChange,
      placeholder: "Confirm Password",
      type: showInputValue ? 'text' : 'password',
      value: inputConfirm
    }), jsx(Button, {
      isActive: showInputValue,
      onClick: this.toggleMode,
      title: showInputValue ? 'Hide Text' : 'Show Text',
      variant: "ghost"
    }, jsx(A11yText, null, showInputValue ? 'Hide Text' : 'Show Text'), jsx("div", {
      css: {
        width: 20
      }
    }, showInputValue ? jsx(LockIcon, null) : jsx(EyeIcon, null)))) : jsx(Button, {
      id: "".concat(htmlID, "-button"),
      onClick: this.toggleInterface,
      variant: "ghost"
    }, value ? 'Update Password' : 'Set Password')), errors.length ? errors.map(_ref3 => {
      let message = _ref3.message,
          data = _ref3.data;
      return jsx(Alert, {
        appearance: "danger",
        key: message
      }, message, data ? " - ".concat(JSON.stringify(data)) : null);
    }) : null, warnings.length ? warnings.map(_ref4 => {
      let message = _ref4.message,
          data = _ref4.data;
      return jsx(Alert, {
        appearance: "warning",
        key: message
      }, message, data ? " - ".concat(JSON.stringify(data)) : null);
    }) : null);
  }

}

export default PasswordField;
