import _objectSpread from '@babel/runtime/helpers/esm/objectSpread';
import '@babel/runtime/helpers/esm/classCallCheck';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import 'lodash.isequal';
import FieldController from '../Controller/dist/fields.esm.js';

class CheckboxController extends FieldController {
  constructor(config) {
    const defaultValue = 'defaultValue' in config ? config.defaultValue : false;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(_objectSpread({}, config, {
      defaultValue
    }), ...args);

    _defineProperty(this, "serialize", data => !!data[this.path]);

    _defineProperty(this, "deserialize", data => !!data[this.path]);

    _defineProperty(this, "getFilterGraphQL", _ref => {
      let type = _ref.type,
          value = _ref.value;
      const key = type === 'is' ? "".concat(this.path) : "".concat(this.path, "_").concat(type);
      return "".concat(key, ": ").concat(value);
    });

    _defineProperty(this, "getFilterLabel", _ref2 => {
      let label = _ref2.label;
      return "".concat(this.label, " ").concat(label.toLowerCase());
    });

    _defineProperty(this, "formatFilter", _ref3 => {
      let label = _ref3.label,
          value = _ref3.value;
      return "".concat(this.getFilterLabel({
        label
      }), ": \"").concat(value, "\"");
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Is',
      getInitialValue: () => 'true'
    }, {
      type: 'not',
      label: 'Is not',
      getInitialValue: () => 'true'
    }]);
  }

}

export default CheckboxController;
