import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { jsx } from '@emotion/core';
import { Component } from 'react';
import { FieldContainer, FieldLabel, FieldInput } from '@arch-ui/fields';
import _extends from '@babel/runtime/helpers/esm/extends';
import { borderRadius, colors, gridSize } from '@arch-ui/theme';
import { Input } from '@arch-ui/input';
import { a as PreviewPlaceholder } from './chunk-30394a4e.esm.js';

const StyledPreview = _ref => {
  let preview = _ref.preview,
      originalUrl = _ref.originalUrl,
      fieldPath = _ref.fieldPath,
      props = _objectWithoutProperties(_ref, ["preview", "originalUrl", "fieldPath"]);

  return jsx(PreviewPlaceholder, _extends({
    data: preview,
    originalUrl: originalUrl,
    fieldPath: fieldPath,
    css: {
      backgroundColor: 'white',
      borderRadius,
      border: "1px solid ".concat(colors.N20),
      marginTop: gridSize,
      padding: 4,
      width: 410,
      // 300px image + chrome
      boxSizing: 'border-box'
    }
  }, props));
};

const PlaceholderPreview = _ref2 => {
  let originalUrl = _ref2.originalUrl,
      fieldPath = _ref2.fieldPath;
  return jsx(StyledPreview, {
    data: {
      html: '<div style="background-color: darkgray; height: 2.5em" />',
      title: 'Preview will be generated after save'
    },
    originalUrl: originalUrl,
    fieldPath: fieldPath,
    css: {
      opacity: 0.3
    }
  });
};

class OEmbedField extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onChange", event => {
      this.props.onChange({
        originalUrl: event.target.value
      });
    });
  }

  render() {
    const _this$props = this.props,
          autoFocus = _this$props.autoFocus,
          field = _this$props.field,
          _this$props$value = _this$props.value,
          value = _this$props$value === void 0 ? null : _this$props$value,
          _this$props$savedValu = _this$props.savedValue,
          savedValue = _this$props$savedValu === void 0 ? null : _this$props$savedValu,
          errors = _this$props.errors;
    const htmlID = "ks-oembed-".concat(field.path);
    const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
    const error = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
    const hasChanged = field.hasChanged({
      [field.path]: savedValue
    }, {
      [field.path]: value
    });
    return jsx(FieldContainer, null, jsx(FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), jsx(FieldInput, null, jsx(Input, {
      autoComplete: "off",
      autoFocus: autoFocus,
      type: "url",
      value: canRead && value && value.originalUrl || '',
      placeholder: canRead ? undefined : error.message,
      onChange: this.onChange,
      id: htmlID
    })), value && value.originalUrl && hasChanged && jsx(PlaceholderPreview, {
      originalUrl: value.originalUrl,
      fieldPath: field.path
    }), value && value.originalUrl && !hasChanged && jsx(StyledPreview, {
      preview: value.preview,
      originalUrl: value.originalUrl,
      fieldPath: field.path
    }));
  }

}

export default OEmbedField;
