import '@babel/runtime/helpers/esm/classCallCheck';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import 'lodash.isequal';
import FieldController from '../Controller/dist/fields.esm.js';

class TextController extends FieldController {
  constructor() {
    super(...arguments);

    _defineProperty(this, "getFilterGraphQL", _ref => {
      let type = _ref.type,
          value = _ref.value;
      const key = type === 'is' ? "".concat(this.path) : "".concat(this.path, "_").concat(type);
      return "".concat(key, ": ").concat(value);
    });

    _defineProperty(this, "getFilterLabel", _ref2 => {
      let label = _ref2.label;
      return "".concat(this.label, " ").concat(label.toLowerCase());
    });

    _defineProperty(this, "formatFilter", _ref3 => {
      let label = _ref3.label,
          value = _ref3.value;
      return "".concat(this.getFilterLabel({
        label
      }), ": \"").concat(value, "\"");
    });

    _defineProperty(this, "serialize", data => {
      const value = data[this.path];

      if (typeof value === 'number') {
        return value;
      } else if (typeof value === 'string' && value.length > 0) {
        // The field component enforces numeric values
        return parseInt(value, 10);
      } else {
        // if it is not a String or a Number then the field must be empty
        return null;
      }
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Is exactly',
      getInitialValue: () => ''
    }, {
      type: 'not',
      label: 'Is not exactly',
      getInitialValue: () => ''
    }, {
      type: 'gt',
      label: 'Is greater than',
      getInitialValue: () => ''
    }, {
      type: 'lt',
      label: 'Is less than',
      getInitialValue: () => ''
    }, {
      type: 'gte',
      label: 'Is greater than or equal to',
      getInitialValue: () => ''
    }, {
      type: 'lte',
      label: 'Is less than or equal to',
      getInitialValue: () => ''
    }]);
  }

}

export default TextController;
