'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread"));

var _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var core = require('@emotion/core');

var React = require('react');

var React__default = _interopDefault(React);

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var Select = _interopDefault(require('@arch-ui/select'));

var options = require('@arch-ui/options');

var filters = require('@arch-ui/filters');

var theme = require('@arch-ui/theme');

const EventCatcher = props => core.jsx("div", _extends({
  onClick: e => {
    e.preventDefault();
    e.stopPropagation();
  }
}, props));

const SelectWrapper = props => core.jsx("div", _extends({
  css: {
    marginTop: theme.gridSize * 2
  }
}, props));

class SelectFilterView extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      inverted: this.props.value.inverted
    });

    _defineProperty(this, "handleRadioChange", value => {
      const _this$props = this.props,
            onChange = _this$props.onChange,
            oldValue = _this$props.value;
      const inverted = value === 'does_match' ? false : true;
      onChange(_objectSpread({}, oldValue, {
        inverted
      }));
    });

    _defineProperty(this, "handleSelectChange", value => {
      const _this$props2 = this.props,
            onChange = _this$props2.onChange,
            oldValue = _this$props2.value;
      const options$$1 = [].concat(value); // ensure consistent data shape

      onChange(_objectSpread({}, oldValue, {
        options: options$$1
      }));
    });
  }

  render() {
    const _this$props3 = this.props,
          innerRef = _this$props3.innerRef,
          field = _this$props3.field,
          value = _this$props3.value;
    const radioValue = value.inverted ? 'does_not_match' : 'does_match';
    const selectProps = {
      components: {
        Option: CheckMarkOption
      },
      innerRef: innerRef,
      onChange: this.handleSelectChange,
      options: field.options,
      placeholder: 'Select...',
      value: value.options
    };
    return core.jsx(React.Fragment, null, core.jsx(filters.RadioGroup, {
      onChange: this.handleRadioChange,
      value: radioValue
    }, core.jsx(filters.Radio, {
      value: "does_match"
    }, "Matches"), core.jsx(filters.Radio, {
      value: "does_not_match"
    }, "Does not match")), core.jsx(SelectWrapper, null, field.options.length > 8 ? core.jsx(EventCatcher, null, core.jsx(Select, _extends({
      menuPortalTarget: document.body
    }, selectProps))) : core.jsx(options.Options, _extends({
      displaySearch: false
    }, selectProps))));
  }

}

const CheckMarkOption = _ref => {
  let children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  return core.jsx(options.OptionPrimitive, props, core.jsx("span", null, children), core.jsx(options.CheckMark, {
    isFocused: props.isFocused,
    isSelected: props.isSelected
  }));
};

exports.default = SelectFilterView;
