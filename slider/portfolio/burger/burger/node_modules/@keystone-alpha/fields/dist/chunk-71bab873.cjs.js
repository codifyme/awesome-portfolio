'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread"));

require("@babel/runtime/helpers/classCallCheck");

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

require('lodash.isequal');

var fields = require('../Controller/dist/fields.cjs.js');

class SelectController extends fields.default {
  constructor(config) {
    const defaultValue = 'defaultValue' in config ? config.defaultValue : null;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(_objectSpread({}, config, {
      defaultValue
    }), ...args);

    _defineProperty(this, "getFilterGraphQL", _ref => {
      let _ref$value = _ref.value,
          inverted = _ref$value.inverted,
          options = _ref$value.options;
      const isMulti = options.length > 1;
      let key = this.path;

      if (isMulti && inverted) {
        key = "".concat(this.path, "_not_in");
      } else if (isMulti) {
        key = "".concat(this.path, "_in");
      } else if (inverted) {
        key = "".concat(this.path, "_not");
      }

      const value = isMulti ? options.map(x => x.value).join(',') : options[0].value;
      return "".concat(key, ": ").concat(value);
    });

    _defineProperty(this, "getFilterLabel", () =>
    /*{ value }*/
    {
      return this.label;
    });

    _defineProperty(this, "formatFilter", _ref2 => {
      let value = _ref2.value;

      if (!value.options.length) {
        return value.inverted ? "".concat(this.label, " is set") : "".concat(this.label, " has no value");
      }

      if (value.options.length > 1) {
        const values = value.options.map(i => i.label).join(', ');
        return value.inverted ? "".concat(this.label, " is not in [").concat(values, "]") : "".concat(this.label, " is in [").concat(values, "]");
      }

      const optionLabel = value.options[0].label;
      return value.inverted ? "".concat(this.label, " is not ").concat(optionLabel) : "".concat(this.label, " is ").concat(optionLabel);
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'is',
      label: 'Matches',
      getInitialValue: () => ({
        inverted: false,
        options: []
      })
    }]);

    this.options = this.config.options;
  }

}

exports.default = SelectController;
