'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray = _interopDefault(require("@babel/runtime/helpers/slicedToArray"));

var pluralize = _interopDefault(require('pluralize'));

var core = require('@emotion/core');

var React = require('react');

var React__default = _interopDefault(React);

var _extends = _interopDefault(require("@babel/runtime/helpers/extends"));

var input = require('@arch-ui/input');

let type = 'unsplashImage'; // TODO: Receive this value from the server somehow. 'pluralize' is a fairly
// large lib.

const path = pluralize.plural(type);
let Context = React.createContext(null);
let Provider = Context.Provider;
const RESULTS_PER_PAGE = 5;
const RESULTS_WIDTH = '400';

function attributeUrl(url, _ref) {
  let source = _ref.source,
      medium = _ref.medium;
  const attributedUrl = new URL(url); // Adding source attribution to the URL for Unsplash to track usage
  // https://help.unsplash.com/articles/2511315-guideline-attribution

  if (source) {
    attributedUrl.searchParams.set('utm_source', source);

    if (medium) {
      attributedUrl.searchParams.set('utm_medium', medium);
    }
  }

  return attributedUrl;
}

const UnsplashImage = _ref2 => {
  let width = _ref2.width,
      height = _ref2.height,
      unsplashId = _ref2.unsplashId,
      publicUrl = _ref2.publicUrl,
      alt = _ref2.alt,
      user = _ref2.user,
      onClick = _ref2.onClick;
  const options = React.useContext(Context);
  const imgUrl = attributeUrl(publicUrl, options.attribution);
  const userUrl = attributeUrl(user.url, options.attribution);
  const linkStyles = {
    color: 'white',
    textDecoration: 'underline'
  };
  return core.jsx("figure", {
    css: [{
      flex: 'auto',
      height: '200px',
      minWidth: '160px',
      margin: '0 4px 4px 0',
      position: 'relative',
      borderRadius: '4px',
      cursor: 'pointer',
      overflow: 'hidden'
    }, width <= height ? {
      width: '320px'
    } : {
      width: '80px'
    }],
    id: unsplashId,
    onClick: onClick
  }, core.jsx("img", {
    src: imgUrl,
    alt: alt,
    css: {
      width: '100%',
      height: '100%',
      objectFit: 'cover',
      verticalAlign: 'middle'
    }
  }), core.jsx("div", {
    css: {
      position: 'absolute',
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      backgroundImage: 'linear-gradient(180deg,rgba(0,0,0,.2) 0,transparent 40%,transparent 60%,rgba(0,0,0,.3))',
      zIndex: 1,
      opacity: 0,
      transition: 'opacity 0.2s ease-in-out',
      '&:hover': {
        opacity: 1
      }
    }
  }, core.jsx("p", {
    css: {
      position: 'absolute',
      bottom: 0,
      left: 0,
      margin: 8,
      fontSize: 14,
      fonWeight: 'bold',
      color: 'white'
    }
  }, "Photo by", ' ', core.jsx("a", {
    css: linkStyles,
    href: userUrl,
    target: "_blank",
    rel: "noopener noreferrer"
  }, user.name), ' ')));
};

const Search = _ref3 => {
  let onSelect = _ref3.onSelect;
  const options = React.useContext(Context);

  const _useState = React.useState(1),
        _useState2 = _slicedToArray(_useState, 2),
        searchPage = _useState2[0],
        setSearchPage = _useState2[1];

  const _useState3 = React.useState(''),
        _useState4 = _slicedToArray(_useState3, 2),
        searchTerm = _useState4[0],
        setSearchTerm = _useState4[1];

  const _useState5 = React.useState(),
        _useState6 = _slicedToArray(_useState5, 2),
        searchResults = _useState6[0],
        setSearchResults = _useState6[1];

  const showPrevious = React.useCallback(() => {
    const newPage = Math.max(1, searchPage - 1);
    setSearchPage(newPage);
    getUnsplashImages(searchTerm, newPage);
  }, [searchPage, setSearchPage, searchTerm]);
  const showNext = React.useCallback(() => {
    const newPage = Math.min(searchResults && searchResults.totalPages || Infinity, searchPage + 1);
    setSearchPage(newPage);
    getUnsplashImages(searchTerm, newPage);
  }, [searchPage, setSearchPage, searchTerm]);

  const getUnsplashImages = (query, page) => {
    fetch(options.adminMeta.apiPath, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        variables: {
          query,
          page,
          perPage: RESULTS_PER_PAGE,
          width: RESULTS_WIDTH
        },
        query: "query searchImages($query: String!, $page: Int, $perPage: Int, $width: String) {\n          searchUnsplash(query: $query, perPage: $perPage, page: $page) {\n            total\n            totalPages\n            results {\n              id\n              unsplashId\n              publicUrl: publicUrlTransformed(transformation: { w: $width})\n              width\n              height\n              alt\n              user {\n                name\n                url\n              }\n            }\n          }\n        }"
      })
    }).then(x => x.json()).then(results => {
      setSearchResults(results.data.searchUnsplash);
    });
  };

  const onChange = React.useCallback(event => {
    event.preventDefault();
    event.stopPropagation();
    setSearchTerm(event.target.value);

    if (event.target.value.length > 3) {
      getUnsplashImages(event.target.value, 1);
    }
  }, [searchTerm, setSearchTerm]);
  const unsplashUrl = attributeUrl('https://unsplash.com', options.attribution);
  return core.jsx("div", {
    css: {
      backgroundColor: '#f2f3f3',
      borderRadius: '8px',
      padding: '12px',
      boxShadow: '0 1px 2px rgba(0,0,0,0.2)'
    }
  }, core.jsx(input.Input, {
    autoFocus: true,
    type: "text",
    id: "unsplash-block-search-input",
    placeholder: "Search for an image...",
    value: searchTerm,
    onChange: onChange,
    onClick: e => {
      e.stopPropagation();
    }
  }), core.jsx("div", null, searchResults && searchResults.results.length ? core.jsx(React.Fragment, null, core.jsx("div", {
    css: {
      display: 'flex',
      flexFlow: 'colunm nowrap',
      justifyContent: 'space-between',
      paddingTop: '16px',
      paddingBottom: '16px',
      width: '100%',
      fontSize: '0.85rem'
    }
  }, core.jsx("span", {
    css: {
      flex: 1
    }
  }, core.jsx("a", {
    css: {
      color: searchPage > 1 ? null : '#ccc',
      cursor: searchPage > 1 ? 'pointer' : 'default',
      textDecoration: 'none',
      '&:hover': {
        textDecoration: searchPage > 1 ? 'underline' : 'none'
      }
    },
    onClick: showPrevious
  }, "Previous")), core.jsx("span", {
    css: {
      flex: 6,
      textAlign: 'center',
      color: '#999'
    }
  }, searchResults.total, " results"), core.jsx("span", {
    css: {
      flex: 1,
      textAlign: 'right'
    }
  }, core.jsx("a", {
    css: {
      color: searchPage < searchResults.totalPages ? null : '#ccc',
      cursor: searchPage < searchResults.totalPages ? 'pointer' : 'default',
      textDecoration: 'none',
      '&:hover': {
        textDecoration: searchPage < searchResults.totalPages ? 'underline' : 'none'
      }
    },
    onClick: showNext
  }, "Next"))), core.jsx("div", {
    css: {
      margin: 0,
      padding: 0,
      display: 'flex',
      flexFlow: 'row wrap',
      justifyContent: 'space-evenly',
      width: 'calc(100% + 4px)'
    }
  }, searchResults.results.map(image => core.jsx(UnsplashImage, _extends({
    key: image.unsplashId
  }, image, {
    unsplashUrl: unsplashUrl,
    onClick: () => onSelect(image)
  }))))) : core.jsx("div", {
    css: {
      padding: '32px',
      textAlign: 'center',
      fontSize: '1rem',
      color: '#cdcdcd'
    }
  }, "Start typing to search for an image on Unsplash")));
};

let Block = _ref4 => {
  let unsplashData = _ref4.unsplashData,
      onSelect = _ref4.onSelect;
  let options = React.useContext(Context);
  let unsplash = null;

  if (unsplashData) {
    const publicUrl = unsplashData.publicUrl,
          alt = unsplashData.alt,
          user = unsplashData.user;
    const imgUrl = attributeUrl(publicUrl, options.attribution);
    const userUrl = attributeUrl(user.url, options.attribution);
    const unsplashUrl = attributeUrl('https://unsplash.com', options.attribution);
    const captionLinkStyle = {
      color: 'inherit',
      textDecoration: 'underline',
      '&:hover': {
        textDecoration: 'none'
      }
    };
    unsplash = core.jsx("div", null, core.jsx("div", null, core.jsx("img", {
      css: {
        maxWidth: '100%'
      },
      src: imgUrl,
      alt: alt
    })), core.jsx("div", {
      css: {
        fontSize: '0.75rem',
        marginTop: '8px',
        color: '#999'
      }
    }, "Photo by", ' ', core.jsx("a", {
      href: userUrl,
      target: "_blank",
      css: captionLinkStyle
    }, user.name), ' ', "on", ' ', core.jsx("a", {
      href: unsplashUrl,
      target: "_blank",
      css: captionLinkStyle
    }, "Unsplash")));
  }

  return core.jsx(React.Fragment, null, !unsplashData && core.jsx(Search, {
    onSelect: onSelect
  }), unsplash);
};

function Sidebar(_ref5) {
  let editor = _ref5.editor;
  return core.jsx("button", {
    type: "button",
    onClick: () => {
      editor.insertBlock({
        type
      });
    }
  }, "Unsplash");
}

function Node(_ref6) {
  let node = _ref6.node,
      editor = _ref6.editor;
  return core.jsx(Block, {
    unsplashData: node.data.get('unsplashData'),
    onRemove: () => {
      editor.removeNodeByKey(node.key);
    },
    onSelect: unsplashData => {
      editor.setNodeByKey(node.key, {
        data: node.data.set('unsplashData', unsplashData)
      });
    }
  });
}

let getSchema = () => ({
  isVoid: true
});

function serialize(_ref7) {
  let node = _ref7.node;
  const unsplashData = node.data.get('unsplashData');
  const joinIds = node.data.get('_joinIds');
  const mutations = joinIds && joinIds.length ? {
    connect: {
      id: joinIds[0]
    }
  } : {
    create: {
      image: unsplashData.unsplashId
    }
  };
  return {
    mutations,
    node: _objectSpread({}, node.toJSON(), {
      // Zero out the data so we don't unnecesarily duplicate the url
      data: {}
    })
  };
}

function deserialize(_ref8) {
  let node = _ref8.node,
      joins = _ref8.joins;

  if (!joins || !joins.length) {
    console.error('No unsplash data received when rehydrating unsplashImage block');
    return;
  } // Inject the original url back into the block


  return node.set('data', node.data.set('unsplashData', joins[0].image));
}

exports.type = type;
exports.path = path;
exports.Provider = Provider;
exports.Sidebar = Sidebar;
exports.Node = Node;
exports.getSchema = getSchema;
exports.serialize = serialize;
exports.deserialize = deserialize;
