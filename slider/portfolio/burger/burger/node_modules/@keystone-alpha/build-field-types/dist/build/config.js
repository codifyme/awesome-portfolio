"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRollupConfigs = getRollupConfigs;

var _package = require("../package");

var _rollup = require("./rollup");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

let getNames = ext => {
  return {
    entryFileNames: `[name]${ext}`,
    chunkFileNames: `dist/[name]-[hash]${ext}`
  };
};

function getRollupConfigs(pkg, aliases) {
  let strictEntrypoints = pkg.entrypoints.map(x => x.strict());
  let configs = [{
    config: (0, _rollup.getRollupConfig)(pkg, strictEntrypoints, aliases),
    outputs: [_objectSpread({
      format: 'es'
    }, getNames('.esm.js'), {
      dir: pkg.directory
    }), _objectSpread({
      format: 'cjs'
    }, getNames('.cjs.js'), {
      dir: pkg.directory,
      exports: 'named'
    })]
  }];
  return configs;
}