"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rollupPluginutils = require("rollup-pluginutils");

var _workerClient = require("../worker-client");

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const regExpCharactersRegExp = /[\\^$.*+?()[\]{}|]/g;

const escapeRegExpCharacters = str => str.replace(regExpCharactersRegExp, '\\$&');

const unpackOptions = (options = {}) => _objectSpread({
  plugins: []
}, options, {
  caller: _objectSpread({
    name: 'rollup-plugin-babel',
    supportsStaticESM: true,
    supportsDynamicImport: true
  }, options.caller)
});

let rollupPluginBabel = pluginOptions => {
  const _unpackOptions = unpackOptions(pluginOptions),
        {
    exclude,
    extensions,
    include
  } = _unpackOptions,
        babelOptions = _objectWithoutProperties(_unpackOptions, ["exclude", "extensions", "include"]);

  const extensionRegExp = new RegExp(`(${extensions.map(escapeRegExpCharacters).join('|')})$`);
  const includeExcludeFilter = (0, _rollupPluginutils.createFilter)(include, exclude);

  const filter = id => extensionRegExp.test(id) && includeExcludeFilter(id);

  return {
    name: 'babel',

    transform(code, filename) {
      if (!filter(filename)) return Promise.resolve(null);
      let options = JSON.stringify(_objectSpread({}, babelOptions, {
        filename
      }));
      return (0, _workerClient.getWorker)().transformBabel(code, options);
    }

  };
};

var _default = rollupPluginBabel;
exports.default = _default;