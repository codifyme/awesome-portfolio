'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _objectSpread = _interopDefault(require("@babel/runtime/helpers/objectSpread"));

require("@babel/runtime/helpers/objectWithoutProperties");

var _slicedToArray = _interopDefault(require("@babel/runtime/helpers/slicedToArray"));

var pluralize = _interopDefault(require('pluralize'));

var core = require('@emotion/core');

var React = require('react');

var React__default = _interopDefault(React);

require("@babel/runtime/helpers/extends");

var button = require('@arch-ui/button');

var __chunk_3 = require('./chunk-2e9639ec.cjs.js');

let type = 'oEmbed'; // TODO: Receive this value from the server somehow. 'pluralize' is a fairly
// large lib.

const path = pluralize.plural(type);
let Context = React.createContext(null);
let Provider = Context.Provider;

const Embed = _ref => {
  let url = _ref.url,
      oembedData = _ref.oembedData;
  let options = React.useContext(Context);

  if (options.previewComponent) {
    // The adapter should implement this option
    const _options$adminMeta$re = options.adminMeta.readViews([options.previewComponent]),
          _options$adminMeta$re2 = _slicedToArray(_options$adminMeta$re, 1),
          Preview = _options$adminMeta$re2[0];

    return core.jsx(Preview, {
      url: url,
      options: options
    });
  } else {
    // This is a fallback so we can at least try to render _something_
    return core.jsx(__chunk_3.PreviewPlaceholder, {
      data: oembedData,
      originalUrl: url
    });
  }
};

let Block = _ref2 => {
  let url = _ref2.url,
      oembedData = _ref2.oembedData,
      onChange = _ref2.onChange,
      onRemove = _ref2.onRemove;

  let _useState = React.useState(url),
      _useState2 = _slicedToArray(_useState, 2),
      currentValue = _useState2[0],
      setCurrentValue = _useState2[1];

  let embed = null;

  if (url) {
    embed = core.jsx(React.Suspense, {
      fallback: core.jsx("div", null, "Generating Preview...")
    }, core.jsx(Embed, {
      url: url,
      oembedData: oembedData
    }));
  }

  return core.jsx(React.Fragment, null, core.jsx("form", {
    onSubmit: e => {
      e.preventDefault();
      onChange(currentValue);
    }
  }, core.jsx("div", {
    css: {
      width: '100%',
      display: 'flex'
    }
  }, core.jsx("input", {
    type: "url",
    placeholder: "Enter a URL and press enter to add an embed",
    css: {
      flex: 10,
      display: 'inline',
      border: 'none',
      backgroundColor: 'transparent',
      outline: 'none',
      paddingTop: 8,
      paddingBottom: 8,
      fontSize: 18
    },
    onClick: e => {
      e.stopPropagation();
    },
    value: currentValue,
    onChange: e => {
      setCurrentValue(e.target.value);
    }
  }), core.jsx("div", {
    css: {
      display: 'inline-flex',
      alignItems: 'center',
      padding: 8
    }
  }, core.jsx(button.Button, {
    appearance: "danger",
    onClick: onRemove,
    type: "button"
  }, "Remove")))), embed);
};

function Sidebar(_ref3) {
  let editor = _ref3.editor;
  return core.jsx("button", {
    type: "button",
    onClick: () => {
      editor.insertBlock({
        type
      });
    }
  }, "Embed");
}

function Node(_ref4) {
  let node = _ref4.node,
      editor = _ref4.editor;
  return core.jsx(Block, {
    url: node.data.get('url'),
    oembedData: node.data.get('oembedData'),
    onRemove: () => {
      editor.removeNodeByKey(node.key);
    },
    onChange: url => {
      editor.setNodeByKey(node.key, {
        data: node.data.set('url', url)
      });
    }
  });
}

let getSchema = () => ({
  isVoid: true
});

function serialize(_ref5) {
  let node = _ref5.node;
  const url = node.data.get('url');
  const joinIds = node.data.get('_joinIds');
  const mutations = joinIds && joinIds.length ? {
    connect: {
      id: joinIds[0]
    }
  } : {
    create: {
      embed: url
    }
  };
  return {
    mutations,
    node: _objectSpread({}, node.toJSON(), {
      // Zero out the data so we don't unnecesarily duplicate the url
      data: {}
    })
  };
}

function deserialize(_ref6) {
  let node = _ref6.node,
      joins = _ref6.joins;

  if (!joins || !joins.length) {
    console.error('No embed data received when rehydrating oEmbed block');
    return;
  } // Inject the original url back into the block


  return node.set('data', node.data.set('url', joins[0].embed.originalUrl).set('oembedData', joins[0].embed));
}

exports.type = type;
exports.path = path;
exports.Provider = Provider;
exports.Sidebar = Sidebar;
exports.Node = Node;
exports.getSchema = getSchema;
exports.serialize = serialize;
exports.deserialize = deserialize;
