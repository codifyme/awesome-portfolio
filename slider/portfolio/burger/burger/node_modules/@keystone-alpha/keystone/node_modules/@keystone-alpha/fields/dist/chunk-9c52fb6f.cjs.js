'use strict';

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty"));

var core = require('@emotion/core');

var dateFns = require('date-fns');

var React = require('react');

var React__default = _interopDefault(React);

var fields = require('@arch-ui/fields');

var dayPicker = require('@arch-ui/day-picker');

class CalendarDayField extends React.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleSelectedChange", value => {
      const _this$props = this.props,
            field = _this$props.field,
            onChange = _this$props.onChange;

      if (value === null || dateFns.getYear(value).toString().length <= 4 && dateFns.getYear(value) <= field.config.yearRangeTo && dateFns.getYear(value) >= field.config.yearRangeFrom) {
        onChange(value);
      }
    });
  }

  render() {
    const _this$props2 = this.props,
          autoFocus = _this$props2.autoFocus,
          field = _this$props2.field,
          value = _this$props2.value,
          errors = _this$props2.errors;
    const htmlID = "ks-input-".concat(field.path);
    return core.jsx(fields.FieldContainer, null, core.jsx(fields.FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), core.jsx(fields.FieldInput, null, core.jsx(dayPicker.TextDayPicker, {
      id: "ks-daypicker-".concat(field.path),
      autoFocus: autoFocus,
      date: value,
      onChange: this.handleSelectedChange
    })));
  }

}

exports.default = CalendarDayField;
