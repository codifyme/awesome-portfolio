import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import { jsx } from '@emotion/core';
import { Component } from 'react';
import { FieldContainer, FieldLabel, FieldInput } from '@arch-ui/fields';
import { Input } from '@arch-ui/input';

class TextField extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "onChange", event => {
      this.props.onChange(event.target.value);
    });
  }

  render() {
    const _this$props = this.props,
          autoFocus = _this$props.autoFocus,
          field = _this$props.field,
          errors = _this$props.errors,
          serverValue = _this$props.value;
    const isMultiline = field.config.isMultiline;
    const value = serverValue || '';
    const htmlID = "ks-input-".concat(field.path);
    const canRead = errors.every(error => !(error instanceof Error && error.name === 'AccessDeniedError'));
    const error = errors.find(error => error instanceof Error && error.name === 'AccessDeniedError');
    return jsx(FieldContainer, null, jsx(FieldLabel, {
      htmlFor: htmlID,
      field: field,
      errors: errors
    }), jsx(FieldInput, null, jsx(Input, {
      autoComplete: "off",
      autoFocus: autoFocus,
      type: "text",
      value: canRead ? value : undefined,
      placeholder: canRead ? undefined : error.message,
      onChange: this.onChange,
      id: htmlID,
      isMultiline: isMultiline
    })));
  }

}

export default TextField;
