import '@babel/runtime/helpers/esm/classCallCheck';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import 'lodash.isequal';
import FieldController from '../Controller/dist/fields.esm.js';

class TextController extends FieldController {
  constructor() {
    super(...arguments);

    _defineProperty(this, "getFilterGraphQL", _ref => {
      let type = _ref.type,
          value = _ref.value;
      const key = type === 'is' ? "".concat(this.path) : "".concat(this.path, "_").concat(type);
      return "".concat(key, ": \"").concat(value, "\"");
    });

    _defineProperty(this, "getFilterLabel", _ref2 => {
      let label = _ref2.label;
      return "".concat(this.label, " ").concat(label.toLowerCase());
    });

    _defineProperty(this, "formatFilter", _ref3 => {
      let label = _ref3.label,
          value = _ref3.value;
      return "".concat(this.getFilterLabel({
        label
      }), ": \"").concat(value, "\"");
    });

    _defineProperty(this, "getFilterTypes", () => [{
      type: 'contains',
      label: 'Contains',
      getInitialValue: () => ''
    }, {
      type: 'not_contains',
      label: 'Does not contain',
      getInitialValue: () => ''
    }, {
      type: 'is',
      label: 'Is exactly',
      getInitialValue: () => ''
    }, {
      type: 'not',
      label: 'Is not exactly',
      getInitialValue: () => ''
    }, {
      type: 'starts_with',
      label: 'Starts with',
      getInitialValue: () => ''
    }, {
      type: 'not_starts_with',
      label: 'Does not start with',
      getInitialValue: () => ''
    }, {
      type: 'ends_with',
      label: 'Ends with',
      getInitialValue: () => ''
    }, {
      type: 'not_ends_with',
      label: 'Does not end with',
      getInitialValue: () => ''
    }]);
  }

}

export default TextController;
