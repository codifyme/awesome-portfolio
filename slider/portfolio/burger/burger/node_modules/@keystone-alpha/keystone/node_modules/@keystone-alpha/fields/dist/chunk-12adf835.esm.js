import _objectSpread from '@babel/runtime/helpers/esm/objectSpread';
import '@babel/runtime/helpers/esm/classCallCheck';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import 'lodash.isequal';
import FieldController from '../Controller/dist/fields.esm.js';

class RelationshipController extends FieldController {
  constructor(config) {
    var _this;

    const defaultValue = 'defaultValue' in config ? config.defaultValue : config.many ? [] : null;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    super(_objectSpread({}, config, {
      defaultValue
    }), ...args);
    _this = this;

    _defineProperty(this, "getQueryFragment", function () {
      let path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.path;
      return "\n      ".concat(path, " {\n        id\n        _label_\n      }\n    ");
    });

    _defineProperty(this, "getFilterGraphQL", _ref => {
      let type = _ref.type,
          value = _ref.value;

      if (type === 'contains') {
        return "".concat(this.path, "_some: {id: \"").concat(value, "\"}");
      } else if (type === 'is') {
        return "".concat(this.path, ": {id: \"").concat(value, "\"}");
      }
    });

    _defineProperty(this, "getFilterLabel", _ref2 => {
      let label = _ref2.label;
      return "".concat(this.label, " ").concat(label.toLowerCase());
    });

    _defineProperty(this, "formatFilter", _ref3 => {
      let label = _ref3.label,
          value = _ref3.value;
      return "".concat(this.getFilterLabel({
        label
      }), ": \"").concat(value, "\"");
    });

    _defineProperty(this, "serialize", data => {
      const path = this.path;
      const many = this.config.many;
      let value = data[path];

      if (many) {
        let ids = [];

        if (Array.isArray(value)) {
          ids = value.map(x => x.id);
        }

        return {
          disconnectAll: true,
          connect: ids.map(id => ({
            id
          }))
        };
      }

      if (!value) {
        return {
          disconnectAll: true
        };
      }

      return {
        connect: {
          id: value.id
        }
      };
    });

    _defineProperty(this, "getFilterTypes", () => {
      const many = this.config.many;

      if (many) {
        return [{
          type: 'contains',
          label: 'Contains',
          getInitialValue: () => null
        }];
      } else {
        return [{
          type: 'is',
          label: 'Is',
          getInitialValue: () => null
        }];
      }
    });
  }

  getRefList() {
    const getListByKey = this.adminMeta.getListByKey;
    const ref = this.config.ref;
    return getListByKey(ref);
  }

}

export default RelationshipController;
